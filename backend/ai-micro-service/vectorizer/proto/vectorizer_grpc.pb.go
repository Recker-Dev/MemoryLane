// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: vectorizer.proto

package vectorizerpb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VectorizerService_UploadAndVectorize_FullMethodName = "/vectorizer.VectorizerService/UploadAndVectorize"
	VectorizerService_QueryVectors_FullMethodName       = "/vectorizer.VectorizerService/QueryVectors"
	VectorizerService_CountVectors_FullMethodName       = "/vectorizer.VectorizerService/CountVectors"
	VectorizerService_DeleteVectors_FullMethodName      = "/vectorizer.VectorizerService/DeleteVectors"
)

// VectorizerServiceClient is the client API for VectorizerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VectorizerServiceClient interface {
	// Streams PDF bytes, returns vectorization result
	UploadAndVectorize(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PDFChunk, VectorizeResponse], error)
	// Query the vector store
	QueryVectors(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// Count how many vectors exist for a file
	CountVectors(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Delete vectors
	DeleteVectors(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type vectorizerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVectorizerServiceClient(cc grpc.ClientConnInterface) VectorizerServiceClient {
	return &vectorizerServiceClient{cc}
}

func (c *vectorizerServiceClient) UploadAndVectorize(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PDFChunk, VectorizeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VectorizerService_ServiceDesc.Streams[0], VectorizerService_UploadAndVectorize_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PDFChunk, VectorizeResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VectorizerService_UploadAndVectorizeClient = grpc.ClientStreamingClient[PDFChunk, VectorizeResponse]

func (c *vectorizerServiceClient) QueryVectors(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, VectorizerService_QueryVectors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vectorizerServiceClient) CountVectors(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, VectorizerService_CountVectors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vectorizerServiceClient) DeleteVectors(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, VectorizerService_DeleteVectors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VectorizerServiceServer is the server API for VectorizerService service.
// All implementations must embed UnimplementedVectorizerServiceServer
// for forward compatibility.
type VectorizerServiceServer interface {
	// Streams PDF bytes, returns vectorization result
	UploadAndVectorize(grpc.ClientStreamingServer[PDFChunk, VectorizeResponse]) error
	// Query the vector store
	QueryVectors(context.Context, *QueryRequest) (*QueryResponse, error)
	// Count how many vectors exist for a file
	CountVectors(context.Context, *CountRequest) (*CountResponse, error)
	// Delete vectors
	DeleteVectors(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedVectorizerServiceServer()
}

// UnimplementedVectorizerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVectorizerServiceServer struct{}

func (UnimplementedVectorizerServiceServer) UploadAndVectorize(grpc.ClientStreamingServer[PDFChunk, VectorizeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadAndVectorize not implemented")
}
func (UnimplementedVectorizerServiceServer) QueryVectors(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVectors not implemented")
}
func (UnimplementedVectorizerServiceServer) CountVectors(context.Context, *CountRequest) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountVectors not implemented")
}
func (UnimplementedVectorizerServiceServer) DeleteVectors(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVectors not implemented")
}
func (UnimplementedVectorizerServiceServer) mustEmbedUnimplementedVectorizerServiceServer() {}
func (UnimplementedVectorizerServiceServer) testEmbeddedByValue()                           {}

// UnsafeVectorizerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VectorizerServiceServer will
// result in compilation errors.
type UnsafeVectorizerServiceServer interface {
	mustEmbedUnimplementedVectorizerServiceServer()
}

func RegisterVectorizerServiceServer(s grpc.ServiceRegistrar, srv VectorizerServiceServer) {
	// If the following call pancis, it indicates UnimplementedVectorizerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VectorizerService_ServiceDesc, srv)
}

func _VectorizerService_UploadAndVectorize_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VectorizerServiceServer).UploadAndVectorize(&grpc.GenericServerStream[PDFChunk, VectorizeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VectorizerService_UploadAndVectorizeServer = grpc.ClientStreamingServer[PDFChunk, VectorizeResponse]

func _VectorizerService_QueryVectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorizerServiceServer).QueryVectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VectorizerService_QueryVectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorizerServiceServer).QueryVectors(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VectorizerService_CountVectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorizerServiceServer).CountVectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VectorizerService_CountVectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorizerServiceServer).CountVectors(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VectorizerService_DeleteVectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorizerServiceServer).DeleteVectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VectorizerService_DeleteVectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorizerServiceServer).DeleteVectors(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VectorizerService_ServiceDesc is the grpc.ServiceDesc for VectorizerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VectorizerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vectorizer.VectorizerService",
	HandlerType: (*VectorizerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryVectors",
			Handler:    _VectorizerService_QueryVectors_Handler,
		},
		{
			MethodName: "CountVectors",
			Handler:    _VectorizerService_CountVectors_Handler,
		},
		{
			MethodName: "DeleteVectors",
			Handler:    _VectorizerService_DeleteVectors_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadAndVectorize",
			Handler:       _VectorizerService_UploadAndVectorize_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "vectorizer.proto",
}
