# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
# import warnings

import app.vectorizer.vectorizer_pb2 as vectorizer__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in vectorizer_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class VectorizerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadAndVectorize = channel.stream_unary(
                '/vectorizer.VectorizerService/UploadAndVectorize',
                request_serializer=vectorizer__pb2.PDFChunk.SerializeToString,
                response_deserializer=vectorizer__pb2.VectorizeResponse.FromString,
                _registered_method=True)
        self.QueryVectors = channel.unary_unary(
                '/vectorizer.VectorizerService/QueryVectors',
                request_serializer=vectorizer__pb2.QueryRequest.SerializeToString,
                response_deserializer=vectorizer__pb2.QueryResponse.FromString,
                _registered_method=True)
        self.CountVectors = channel.unary_unary(
                '/vectorizer.VectorizerService/CountVectors',
                request_serializer=vectorizer__pb2.CountRequest.SerializeToString,
                response_deserializer=vectorizer__pb2.CountResponse.FromString,
                _registered_method=True)
        self.DeleteVectors = channel.unary_unary(
                '/vectorizer.VectorizerService/DeleteVectors',
                request_serializer=vectorizer__pb2.DeleteRequest.SerializeToString,
                response_deserializer=vectorizer__pb2.DeleteResponse.FromString,
                _registered_method=True)


class VectorizerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UploadAndVectorize(self, request_iterator, context):
        """Streams PDF bytes, returns vectorization result
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryVectors(self, request, context):
        """Query the vector store
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountVectors(self, request, context):
        """Count how many vectors exist for a file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteVectors(self, request, context):
        """Delete vectors
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VectorizerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UploadAndVectorize': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadAndVectorize,
                    request_deserializer=vectorizer__pb2.PDFChunk.FromString,
                    response_serializer=vectorizer__pb2.VectorizeResponse.SerializeToString,
            ),
            'QueryVectors': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryVectors,
                    request_deserializer=vectorizer__pb2.QueryRequest.FromString,
                    response_serializer=vectorizer__pb2.QueryResponse.SerializeToString,
            ),
            'CountVectors': grpc.unary_unary_rpc_method_handler(
                    servicer.CountVectors,
                    request_deserializer=vectorizer__pb2.CountRequest.FromString,
                    response_serializer=vectorizer__pb2.CountResponse.SerializeToString,
            ),
            'DeleteVectors': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteVectors,
                    request_deserializer=vectorizer__pb2.DeleteRequest.FromString,
                    response_serializer=vectorizer__pb2.DeleteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vectorizer.VectorizerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('vectorizer.VectorizerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class VectorizerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UploadAndVectorize(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/vectorizer.VectorizerService/UploadAndVectorize',
            vectorizer__pb2.PDFChunk.SerializeToString,
            vectorizer__pb2.VectorizeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryVectors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vectorizer.VectorizerService/QueryVectors',
            vectorizer__pb2.QueryRequest.SerializeToString,
            vectorizer__pb2.QueryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CountVectors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vectorizer.VectorizerService/CountVectors',
            vectorizer__pb2.CountRequest.SerializeToString,
            vectorizer__pb2.CountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteVectors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vectorizer.VectorizerService/DeleteVectors',
            vectorizer__pb2.DeleteRequest.SerializeToString,
            vectorizer__pb2.DeleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
